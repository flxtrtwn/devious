- hosts: web
  remote_user: deploy
  become: yes

  vars:
      domain_name: example.de
      webroot: /var/www/html
      acme_webroot: /var/www/letsencrypt

  tasks:
      - name: Install apt dependencies for adding repos
        apt:
            name:
                - curl
                - gnupg2
                - ca-certificates
                - lsb-release
                - ubuntu-keyring

      - name: Add nginx signing key
        apt_key:
            url: https://nginx.org/keys/nginx_signing.key
            state: present

      - name: Add nginx repository
        apt_repository:
            repo: 'deb [arch=amd64] http://nginx.org/packages/ubuntu jammy nginx'
            state: present

      - name: Install dependencies
        apt:
            name:
                - python3
                - nginx
            state: latest

      - name: Install certbot
        community.general.snap:
            name: certbot
            classic: true

      - name: Ensure nginx starts on reboot
        service:
            name: nginx
            state: started
            enabled: yes

      - name: Delete default nginx config
        ansible.builtin.file:
            state: absent
            path: /etc/nginx/conf.d/default.conf

      - name: Test for existing cert
        stat:
            path: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
        register: certfile

      - when: not certfile.stat.exists
        block:
            - name: Configure nginx for certbot
              copy:
                  dest: /etc/nginx/conf.d/{{ domain_name }}.conf
                  content: |
                      server {
                          http2 on;
                          listen 80 default_server;
                          listen [::]:80 default_server;
                          server_name {{ domain_name }} www.{{ domain_name }};

                          location /.well-known/acme-challenge/ {
                              root {{ acme_webroot }};
                          }
                      }
            - block:
                  - name: Obtain cert
                    command: >
                        certbot
                        certonly
                        --nginx
                        -d {{ domain_name }}
                        -d www.{{ domain_name }}
                        --non-interactive
                        --agree-tos
                        --email mail@{{ domain_name }}
              rescue:
                  - name: Show certbot logs
                    command: cat /var/log/letsencrypt/letsencrypt.log
                    register: certbot_logs

                  - name: Debug certbot logs
                    debug:
                        msg: '{{ certbot_logs.stdout_lines }}'

                  - name: Fail because cert deployment failed
                    fail:
                        msg: 'Cert deployment failed — see above debug output'

      - name: Configure nginx for production
        copy:
            dest: /etc/nginx/conf.d/{{ domain_name }}.conf
            content: |
                server {
                    http2 on;
                    listen 80 default_server;
                    listen [::]:80 default_server;
                    listen 443 ssl default_server;
                    listen [::]:443 ssl default_server;

                    server_name _;
                    server_tokens off;
                    ssl_reject_handshake on;

                    return 444;
                }

                server {
                    http2 on;
                    listen 80;
                    listen [::]:80;
                    server_name {{ domain_name }} www.{{ domain_name }};
                    server_tokens off;

                    location /.well-known/acme-challenge/ {
                        root {{ acme_webroot }};
                    }

                    return 301 https://{{ domain_name }}$request_uri;
                }

                server {
                    http2 on;
                    listen 443 ssl;
                    listen [::]:443 ssl;
                    server_name {{ domain_name }};
                    server_tokens off;

                    add_header X-Frame-Options "DENY" always;

                    # Include Certbot-managed SSL settings
                    include /etc/letsencrypt/options-ssl-nginx.conf;
                    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
                    ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;

                    location /.well-known/acme-challenge/ {
                        root {{ acme_webroot }};
                    }

                    root {{ webroot }};
                    index index.html;

                    location / {
                        try_files $uri $uri/ =404;
                    }
                }

                server {
                    http2 on;
                    listen 443 ssl;
                    listen [::]:443 ssl;
                    server_name www.{{ domain_name }};
                    server_tokens off;

                    # Include Certbot-managed SSL settings
                    include /etc/letsencrypt/options-ssl-nginx.conf;
                    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
                    ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;

                    location /.well-known/acme-challenge/ {
                        root {{ acme_webroot }};
                    }

                    return 301 https://{{ domain_name }}$request_uri;
                }

      - name: Reload nginx
        block:
            - name: Reload Nginx
              service:
                  name: nginx
                  state: reloaded
        rescue:
            - name: Show Nginx config test output
              command: nginx -t
              register: nginx_test
              ignore_errors: yes

            - name: Debug Nginx test output
              debug:
                  msg:
                      - stdout: '{{ nginx_test.stdout_lines }}'
                      - stderr: '{{ nginx_test.stderr_lines }}'

            - name: Show recent Nginx journal logs
              command: journalctl -xeu nginx.service --no-pager -n 50
              register: nginx_journal
              ignore_errors: yes

            - name: Debug Nginx journal logs
              debug:
                  msg: '{{ nginx_journal.stdout_lines }}'

            - name: Fail because Nginx reload failed
              fail:
                  msg: 'Nginx reload failed — see above debug output'

      - name: Ensure remote web root exists
        file:
            path: '{{ webroot }}'
            state: directory
            owner: www-data
            group: www-data
            mode: '0755'

      - name: Deploy website
        ansible.posix.synchronize:
            src: '{{ playbook_dir }}/../homepage/'
            dest: '{{ webroot }}/'
            recursive: yes
            delete: yes

      - name: Ensure nginx configuration is correct
        command: nginx -t
        register: nginx_test
        failed_when: nginx_test.rc != 0

      - name: Restart nginx
        service:
            name: nginx
            state: restarted

      - name: Ensure certbot renewal timer is active
        systemd:
            name: snap.certbot.renew.timer
            enabled: yes
            state: started

      - name: Add certbot deploy hook
        copy:
            dest: /etc/letsencrypt/renewal-hooks/deploy/reload-nginx.sh
            content: |
                #!/bin/sh
                systemctl reload nginx
            mode: '0755'

  handlers:
      - name: restart nginx
        service:
            name: nginx
            state: restarted
